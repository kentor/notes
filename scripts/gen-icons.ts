/// <reference lib="deno.ns" />
import * as path from 'jsr:@std/path';

type Icon = {
  absolutePath: string;
  componentName: string;
  name: string;
};

const dirname = import.meta.dirname;

if (!dirname) {
  throw new Error('empty dirname');
}

const iconsdir = path.join(dirname, '..', 'src', 'icons');
const outdir = path.join(dirname, '..', 'src', 'js', 'components', 'icons');
const banner = `/* AUTOGENERATED. DO NOT MODIFY. */
/* eslint-disable */`;

const icons: Array<Icon> = [...Deno.readDirSync(iconsdir)]
  .toSorted((a, b) => a.name.localeCompare(b.name))
  .map((dirEntry) => {
    const name = path.basename(dirEntry.name, '.svg');
    const componentName = name
      .replace(/\b\w/g, (c) => c.toUpperCase())
      .replace(/\W/g, '');
    return {
      absolutePath: path.resolve(iconsdir, dirEntry.name),
      name,
      componentName,
    };
  });

const decoder = new TextDecoder('utf-8');
const encoder = new TextEncoder();

// Generate the icon components
icons.forEach(async (icon) => {
  const svgSource = decoder.decode(await Deno.readFile(icon.absolutePath));
  const out = path.join(outdir, `${icon.componentName}.tsx`);
  Deno.writeFile(
    out,
    encoder.encode(`${banner}
import React from 'react';

export default function ${icon.componentName}(props: React.ComponentProps<'svg'>) {
  return ${svgSource.replace('>', ' {...props}>').replace(/\n$/, '')}
}
`),
  );
});

Deno.writeFile(
  path.join(outdir, '..', 'Icon.tsx'),
  encoder.encode(`${banner}
import React from 'react';
${
    icons
      .map(
        (icon) =>
          `import ${icon.componentName} from 'App/components/icons/${icon.componentName}.tsx';`,
      )
      .join('\n')
  }

const icons = {
${icons.map((icon) => `  '${icon.name}': ${icon.componentName},`).join('\n')}
};

type Props = {
  icon: keyof typeof icons;
  size?: number;
};

function Icon(props: Props) {
  const IconComponent = icons[props.icon];
  const size = props.size || 13;
  const style = {
    fill: 'currentcolor',
    height: size,
    width: size,
  };
  return (
    <IconComponent preserveAspectRatio="xMidYMid meet" style={style} />
  );
}

export default Icon;
  `),
);
